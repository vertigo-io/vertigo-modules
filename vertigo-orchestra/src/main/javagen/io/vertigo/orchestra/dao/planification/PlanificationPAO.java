/*
 * vertigo - application development platform
 *
 * Copyright (C) 2013-2023, Vertigo.io, team@vertigo.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vertigo.orchestra.dao.planification;

import javax.inject.Inject;

import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class PlanificationPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public PlanificationPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkCleanFuturePlanifications.
	 * @param processName String
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "orchestra",
			name = "TkCleanFuturePlanifications",
			request = "delete from o_process_planification prp\n" + 
 "         	where prp.PRO_ID in (select pro.PRO_ID from o_process pro where pro.NAME = #processName#) and prp.SST_CD = 'WAITING' and prp.expected_time > current_timestamp",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void cleanFuturePlanifications(@io.vertigo.datamodel.task.proxy.TaskInput(name = "processName", smartType = "STyOLibelle") final String processName) {
		final Task task = createTaskBuilder("TkCleanFuturePlanifications")
				.addValue("processName", processName)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("orchestra"))
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkCleanPlanificationsOnBoot.
	 * @param currentDate Instant
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "orchestra",
			name = "TkCleanPlanificationsOnBoot",
			request = "update o_process_planification set \n" + 
 " 			SST_CD = 'MISFIRED'\n" + 
 " 			where SST_CD = 'WAITING' and expected_time < #currentDate# and prp_id not in (select prp.PRP_ID from  o_process_planification prp\n" + 
 "         	inner join (\n" + 
 " 				    select pro_id, max(expected_time) as MaxDate\n" + 
 " 				    from o_process_planification\n" + 
 " 				    group by pro_id\n" + 
 " 				) pp on pp.pro_id = prp.pro_id and pp.MaxDate = prp.expected_time)",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void cleanPlanificationsOnBoot(@io.vertigo.datamodel.task.proxy.TaskInput(name = "currentDate", smartType = "STyOTimestamp") final java.time.Instant currentDate) {
		final Task task = createTaskBuilder("TkCleanPlanificationsOnBoot")
				.addValue("currentDate", currentDate)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("orchestra"))
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkReserveProcessToExecute.
	 * @param lowerLimit Instant
	 * @param upperLimit Instant
	 * @param nodId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "orchestra",
			name = "TkReserveProcessToExecute",
			request = "update o_process_planification\n" + 
 "         	set SST_CD = 'RESERVED', NOD_ID = #nodId#\n" + 
 "         	where (SST_CD = 'WAITING' and expected_time >= #lowerLimit# and expected_time <= #upperLimit#) \n" + 
 "         			or (SST_CD = 'RESCUED')",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void reserveProcessToExecute(@io.vertigo.datamodel.task.proxy.TaskInput(name = "lowerLimit", smartType = "STyOTimestamp") final java.time.Instant lowerLimit, @io.vertigo.datamodel.task.proxy.TaskInput(name = "upperLimit", smartType = "STyOTimestamp") final java.time.Instant upperLimit, @io.vertigo.datamodel.task.proxy.TaskInput(name = "nodId", smartType = "STyOIdentifiant") final Long nodId) {
		final Task task = createTaskBuilder("TkReserveProcessToExecute")
				.addValue("lowerLimit", lowerLimit)
				.addValue("upperLimit", upperLimit)
				.addValue("nodId", nodId)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("orchestra"))
				.build();
		getTaskManager().execute(task);
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
