/*
 * vertigo - application development platform
 *
 * Copyright (C) 2013-2023, Vertigo.io, team@vertigo.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vertigo.orchestra.monitoring.dao.uidefinitions;

import javax.inject.Inject;

import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class UidefinitionsPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public UidefinitionsPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetProcessByName.
	 * @param name String
	 * @return OProcessUi dtOProcessUi
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "orchestra",
			name = "TkGetProcessByName",
			request = "select  pro.PRO_ID as PRO_ID,\n" + 
 "         			pro.NAME as NAME,\n" + 
 "         			pro.LABEL as LABEL,\n" + 
 "         			pro.CRON_EXPRESSION as CRON_EXPRESSION,\n" + 
 "         			pro.INITIAL_PARAMS as INITIAL_PARAMS,\n" + 
 "         			pro.MULTIEXECUTION as MULTIEXECUTION,\n" + 
 "         			pro.ACTIVE as ACTIVE,\n" + 
 "         			pro.RESCUE_PERIOD as RESCUE_PERIOD,\n" + 
 "         			pro.METADATAS as METADATAS\n" + 
 "         	from o_process pro   \n" + 
 "         	where pro.NAME = #name# and pro.ACTIVE_VERSION is true",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtOProcessUi", name = "dtOProcessUi")
	public io.vertigo.orchestra.monitoring.domain.uidefinitions.OProcessUi getProcessByName(@io.vertigo.datamodel.task.proxy.TaskInput(name = "name", smartType = "STyOLibelle") final String name) {
		final Task task = createTaskBuilder("TkGetProcessByName")
				.addValue("name", name)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("orchestra"))
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkSearchProcessByLabel.
	 * @param search String
	 * @return DtList de OProcessUi dtcOProcessUi
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "orchestra",
			name = "TkSearchProcessByLabel",
			request = "select  pro.PRO_ID as PRO_ID,\n" + 
 "         			pro.NAME as NAME,\n" + 
 "         			pro.LABEL as LABEL,\n" + 
 "         			pro.CRON_EXPRESSION as CRON_EXPRESSION,\n" + 
 "         			pro.INITIAL_PARAMS as INITIAL_PARAMS,\n" + 
 "         			pro.MULTIEXECUTION as MULTIEXECUTION,\n" + 
 "         			pro.ACTIVE as ACTIVE,\n" + 
 "         			pro.RESCUE_PERIOD as RESCUE_PERIOD,\n" + 
 "         			pro.METADATAS as METADATAS\n" + 
 "         	from o_process pro   \n" + 
 "         	where lower(pro.LABEL) like lower(#search#)  and pro.ACTIVE_VERSION is true",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtOProcessUi", name = "dtcOProcessUi")
	public io.vertigo.datamodel.data.model.DtList<io.vertigo.orchestra.monitoring.domain.uidefinitions.OProcessUi> searchProcessByLabel(@io.vertigo.datamodel.task.proxy.TaskInput(name = "search", smartType = "STyOLibelle") final String search) {
		final Task task = createTaskBuilder("TkSearchProcessByLabel")
				.addValue("search", search)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("orchestra"))
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
