package io.vertigo.orchestra.monitoring.dao.uiexecutions


create Task TkGetExecutionByPreId {
	storeName : "orchestra"
    className : "io.vertigo.basics.task.TaskEngineSelect"
        request : "
        	select  pre.PRE_ID as PRE_ID,
        			pre.BEGIN_TIME as BEGIN_TIME,
        			pre.END_TIME as END_TIME,
        			round(extract('epoch' from (pre.END_TIME-pre.BEGIN_TIME))) as EXECUTION_TIME,
        			pre.EST_CD as STATUS,
        			pre.CHECKED as CHECKED,
        			pre.CHECKING_DATE as CHECKING_DATE,
        			pre.CHECKING_COMMENT as CHECKING_COMMENT,
        			(select 
			        	acl.attachment is not null
						from o_activity_execution ace
						left join o_activity_log acl on acl.ACE_ID = ace.ACE_ID
						where ace.PRE_ID = #preId#
						order by ace.end_time desc limit 1) as HAS_ATTACHMENT
        	from o_process_execution pre   
        	where pre.PRE_ID = #preId#
        	order by pre.begin_time desc        	
			"
	in preId	 	{domain : DoOIdentifiant		cardinality: "1" 	}
	out dtOProcessExecutionUi	 	{domain : DoDtOProcessExecutionUi		cardinality: "1" 	}
}


create Task TkGetExecutionsByProcessName {
	storeName : "orchestra"
    className : "io.vertigo.basics.task.TaskEngineSelect"
        request : "
        	select  pre.PRE_ID as PRE_ID,
        			pre.BEGIN_TIME as BEGIN_TIME,
        			pre.END_TIME as END_TIME,
        			round(extract('epoch' from (pre.END_TIME-pre.BEGIN_TIME))) as EXECUTION_TIME,
        			pre.EST_CD as STATUS
        	from o_process pro
        	join o_process_execution pre on pro.PRO_ID = pre.PRO_ID
        	where pro.NAME = #name#
        	<%if (!\"\".equals(status)) {%>
        		and pre.EST_CD = #status#
        	<%}%>
        	order by pre.begin_time desc
        	limit #limit#
        	offset #offset#
        	
			"
	in name	 	{domain : DoOLibelle		cardinality: "1" 	}
	in status	{domain : DoOCodeIdentifiant		cardinality: "1" 	}
	in limit	 	{domain : DoONombre		cardinality: "1" 	}
	in offset	 	{domain : DoONombre		cardinality: "1" 	}
	out dtcOProcessExecutionUi	 	{domain : DoDtOProcessExecutionUi		cardinality: "*" 	}
}


create Task TkGetActivitiyByAceId {
	storeName : "orchestra"
    className : "io.vertigo.basics.task.TaskEngineSelect"
        request : "
        	select  ace.ACE_ID as ACE_ID,
        			act.LABEL as LABEL,
        			ace.BEGIN_TIME as BEGIN_TIME,
        			ace.END_TIME as END_TIME,
        			round(extract('epoch' from (ace.END_TIME-ace.BEGIN_TIME))) as EXECUTION_TIME,
        			ace.EST_CD as STATUS,
        			max((case when acw.IS_IN is true then acw.WORKSPACE else null end)) as WORKSPACE_IN,
        			max((case when acw.IS_IN is false then acw.WORKSPACE else null end)) as WORKSPACE_OUT,
        			acl.ATTACHMENT is not null as HAS_ATTACHMENT,
        			acl.LOG is not null as HAS_TECHNICAL_LOG
        	from o_activity_execution ace
        	join o_activity act on act.ACT_ID = ace.ACT_ID
        	join o_activity_workspace acw on acw.ACE_ID = ace.ACE_ID
        	left join o_activity_log acl on acl.ACE_ID = ace.ACE_ID
        	where ace.ACE_ID = #aceId#
        	group by ace.ACE_ID, act.LABEL, ace.BEGIN_TIME, ace.END_TIME, acl.ATTACHMENT, acl.LOG, ace.EST_CD
        	order by ace.BEGIN_TIME asc
        	
			"
	in aceId	 	{domain : DoOIdentifiant		cardinality: "1" 	}
	out dtOActivityExecutionUi	 	{domain : DoDtOActivityExecutionUi		cardinality: "1" 	}
}

create Task TkGetActivitiesByPreId {
	storeName : "orchestra"
    className : "io.vertigo.basics.task.TaskEngineSelect"
        request : "
        	select  ace.ACE_ID as ACE_ID,
        			act.LABEL as LABEL,
        			ace.BEGIN_TIME as BEGIN_TIME,
        			ace.END_TIME as END_TIME,
        			round(extract('epoch' from (ace.END_TIME-ace.BEGIN_TIME))) as EXECUTION_TIME,
        			ace.EST_CD as STATUS,
        			max((case when acw.IS_IN is true then acw.WORKSPACE else null end)) as WORKSPACE_IN,
        			max((case when acw.IS_IN is false then acw.WORKSPACE else null end)) as WORKSPACE_OUT,
        			acl.ATTACHMENT is not null as HAS_ATTACHMENT,
        			acl.LOG is not null as HAS_TECHNICAL_LOG
        	from o_activity_execution ace
        	join o_activity act on act.ACT_ID = ace.ACT_ID
        	join o_activity_workspace acw on acw.ACE_ID = ace.ACE_ID
        	left join o_activity_log acl on acl.ACE_ID = ace.ACE_ID
        	where ace.PRE_ID = #preId#
        	group by ace.ACE_ID, act.LABEL, ace.BEGIN_TIME, ace.END_TIME, acl.ATTACHMENT, acl.LOG, ace.EST_CD
        	order by ace.BEGIN_TIME asc
        	
			"
	in preId	 	{domain : DoOIdentifiant		cardinality: "1" 	}
	out dtcOActivityExecutionUi	 	{domain : DoDtOActivityExecutionUi		cardinality: "*" 	}
}